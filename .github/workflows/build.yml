name: build mtpwn

# 定义触发工作流的事件
on:
  workflow_dispatch:
# 工作流配置
jobs:
  build:
    # 运行环境设置为Ubuntu最新版本
    runs-on: ubuntu-latest

    # 步骤配置
    steps:
    - name: Checkout code
      # 使用GitHub Actions的checkout动作检出代码
      uses: actions/checkout@v2

    - name: Set up dependencies
      # 安装必要的依赖，如libmtp-dev
      run: sudo apt-get update && sudo apt-get install -y libmtp-dev

    - name: Download and extract MTPwn sources
      # 下载并解压MTPwn源代码
      run: |
        curl -L "https://github.com/smeso/MTPwn/archive/v0.1.tar.gz" -o mtpwn.tgz
        tar xzvf mtpwn.tgz

    - name: Build MTPwn
      # 进入MTPwn源代码目录并编译
      run: |
        cd MTPwn-0.1
        ls
        make
    - name: Run MTPwn
      # 进入MTPwn源代码目录并编译
      run: |
        cd MTPwn-0.1
        ls
        file mtpwn
        mkdir dt
        cp mtpwn ./dt
        zip -r bin.zip ./dt
        cd dt
        ls

        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 必须设置这个环境变量来授权
      with:
        tag_name: ${{ github.run_id }} # 使用触发事件的标签名作为发布版本号
        release_name: Release ${{ github.run_id }} # 发布名称，可以根据需要自定义
        draft: false # 是否设置为草稿状态
        prerelease: false # 是否设置为预发布状态

    # 假设你已经有一个编译好的文件叫做 compiled-file.zip，你想上传到发布中
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 同样需要这个环境变量
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # 使用上一步创建的发布的上传URL
        asset_path: ./MTPwn-0.1/bin.zip # 要上传的文件路径
        asset_name: bin.zip # 上传后的文件名，可以根据需要自定义
        asset_content_type: application/zip # 文件类型，这里是zip格式
    - name: Upload to Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./bin.zip
        name: mtpwn64-bit-${{ github.run_id }}
        tag_name: ${{ github.run_id }}
        body: 64-bit
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
             


   


 





        


        

    # 可以在这里添加更多步骤，比如运行测试或上传构建产物
    # - name: Run tests
    #   run: ./path/to/tests

    # - name: Upload artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: mtpwn-binary
    #     path: MTPwn-0.1/mtpwn

# 注意：上面的示例中没有包含实际的测试步骤，因为MTPwn的测试可能需要特定的设备或模拟环境。
# 根据实际情况，你可以添加适合你的测试步骤，或者仅保留编译步骤来验证代码是否能够成功构建。
